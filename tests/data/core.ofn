Prefix(:=<http://purl.obolibrary.org/obo/ro/core.owl#>)
Prefix(obo:=<http://purl.obolibrary.org/obo/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(foaf:=<http://xmlns.com/foaf/0.1/>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(swrl:=<http://www.w3.org/2003/11/swrl#>)
Prefix(swrlb:=<http://www.w3.org/2003/11/swrlb#>)
Prefix(terms:=<http://purl.org/dc/terms/>)
Prefix(oboInOwl:=<http://www.geneontology.org/formats/oboInOwl#>)


Ontology(<http://purl.obolibrary.org/obo/ro/core.owl>
<http://purl.obolibrary.org/obo/ro/releases/2024-02-13/core.owl>
Annotation(terms:license <https://creativecommons.org/publicdomain/zero/1.0/>)
Annotation(owl:versionInfo "2024-02-13")
Annotation(foaf:homepage "https://github.com/oborel/obo-relations/wiki/ROCore"^^xsd:anyURI)

Declaration(Class(obo:BFO_0000002))
Declaration(Class(obo:BFO_0000003))
Declaration(Class(obo:BFO_0000004))
Declaration(Class(obo:BFO_0000006))
Declaration(Class(obo:BFO_0000015))
Declaration(Class(obo:BFO_0000016))
Declaration(Class(obo:BFO_0000017))
Declaration(Class(obo:BFO_0000019))
Declaration(Class(obo:BFO_0000020))
Declaration(Class(obo:BFO_0000023))
Declaration(Class(obo:BFO_0000031))
Declaration(Class(obo:BFO_0000034))
Declaration(Class(obo:BFO_0000040))
Declaration(Class(obo:BFO_0000141))
Declaration(ObjectProperty(obo:BFO_0000050))
Declaration(ObjectProperty(obo:BFO_0000051))
Declaration(ObjectProperty(obo:BFO_0000054))
Declaration(ObjectProperty(obo:BFO_0000055))
Declaration(ObjectProperty(obo:BFO_0000066))
Declaration(ObjectProperty(obo:BFO_0000067))
Declaration(ObjectProperty(obo:RO_0000052))
Declaration(ObjectProperty(obo:RO_0000053))
Declaration(ObjectProperty(obo:RO_0000056))
Declaration(ObjectProperty(obo:RO_0000057))
Declaration(ObjectProperty(obo:RO_0000058))
Declaration(ObjectProperty(obo:RO_0000059))
Declaration(ObjectProperty(obo:RO_0000079))
Declaration(ObjectProperty(obo:RO_0000080))
Declaration(ObjectProperty(obo:RO_0000081))
Declaration(ObjectProperty(obo:RO_0000085))
Declaration(ObjectProperty(obo:RO_0000086))
Declaration(ObjectProperty(obo:RO_0000087))
Declaration(ObjectProperty(obo:RO_0000091))
Declaration(ObjectProperty(obo:RO_0000092))
Declaration(ObjectProperty(obo:RO_0001000))
Declaration(ObjectProperty(obo:RO_0001001))
Declaration(ObjectProperty(obo:RO_0001015))
Declaration(ObjectProperty(obo:RO_0001025))
Declaration(ObjectProperty(obo:RO_0002000))
Declaration(ObjectProperty(obo:RO_0002002))
Declaration(ObjectProperty(obo:RO_0002350))
Declaration(ObjectProperty(obo:RO_0002351))
Declaration(ObjectProperty(obo:RO_0004096))
Declaration(ObjectProperty(obo:RO_0004097))
Declaration(AnnotationProperty(obo:IAO_0000111))
Declaration(AnnotationProperty(obo:IAO_0000112))
Declaration(AnnotationProperty(obo:IAO_0000114))
Declaration(AnnotationProperty(obo:IAO_0000115))
Declaration(AnnotationProperty(obo:IAO_0000116))
Declaration(AnnotationProperty(obo:IAO_0000118))
Declaration(AnnotationProperty(obo:IAO_0000119))
Declaration(AnnotationProperty(obo:IAO_0000600))
Declaration(AnnotationProperty(obo:RO_0001900))
Declaration(AnnotationProperty(terms:license))
Declaration(AnnotationProperty(terms:source))
Declaration(AnnotationProperty(foaf:homepage))

############################
#   Object Properties
############################

# Object Property: obo:BFO_0000050 (part of)

AnnotationAssertion(obo:IAO_0000111 obo:BFO_0000050 "is part of"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000050 "my brain is part of my body (continuant parthood, two material entities)"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000050 "my stomach cavity is part of my stomach (continuant parthood, immaterial entity is part of material entity)"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000050 "this day is part of this year (occurrent parthood)"@en)
AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000050 "a core relation that holds between a part and its whole"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000050 "Everything is part of itself. Any part of any part of a thing is itself part of that thing. Two distinct things cannot be part of each other."@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000050 "Occurrents are not subject to change and so parthood between occurrents holds for all the times that the part exists. Many continuants are subject to change, so parthood between continuants will only hold at certain times, but this is difficult to specify in OWL. See http://purl.obolibrary.org/obo/ro/docs/temporal-semantics/"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000050 "Parthood requires the part and the whole to have compatible classes: only an occurrent can be part of an occurrent; only a process can be part of a process; only a continuant can be part of a continuant; only an independent continuant can be part of an independent continuant; only an immaterial entity can be part of an immaterial entity; only a specifically dependent continuant can be part of a specifically dependent continuant; only a generically dependent continuant can be part of a generically dependent continuant. (This list is not exhaustive.)

A continuant cannot be part of an occurrent: use 'participates in'. An occurrent cannot be part of a continuant: use 'has participant'. A material entity cannot be part of an immaterial entity: use 'has location'. A specifically dependent continuant cannot be part of an independent continuant: use 'inheres in'. An independent continuant cannot be part of a specifically dependent continuant: use 'bearer of'."@en)
AnnotationAssertion(obo:IAO_0000118 obo:BFO_0000050 "part_of"@en)
AnnotationAssertion(obo:RO_0001900 obo:BFO_0000050 obo:RO_0001901)
AnnotationAssertion(rdfs:label obo:BFO_0000050 "part of"@en)
AnnotationAssertion(rdfs:seeAlso obo:BFO_0000050 "http://www.obofoundry.org/ro/#OBO_REL:part_of")
InverseObjectProperties(obo:BFO_0000050 obo:BFO_0000051)
TransitiveObjectProperty(obo:BFO_0000050)

# Object Property: obo:BFO_0000051 (has part)

AnnotationAssertion(obo:IAO_0000111 obo:BFO_0000051 "has part"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000051 "my body has part my brain (continuant parthood, two material entities)"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000051 "my stomach has part my stomach cavity (continuant parthood, material entity has part immaterial entity)"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000051 "this year has part this day (occurrent parthood)"@en)
AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000051 "a core relation that holds between a whole and its part"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000051 "Everything has itself as a part. Any part of any part of a thing is itself part of that thing. Two distinct things cannot have each other as a part."@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000051 "Occurrents are not subject to change and so parthood between occurrents holds for all the times that the part exists. Many continuants are subject to change, so parthood between continuants will only hold at certain times, but this is difficult to specify in OWL. See http://purl.obolibrary.org/obo/ro/docs/temporal-semantics/"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000051 "Parthood requires the part and the whole to have compatible classes: only an occurrent have an occurrent as part; only a process can have a process as part; only a continuant can have a continuant as part; only an independent continuant can have an independent continuant as part; only a specifically dependent continuant can have a specifically dependent continuant as part; only a generically dependent continuant can have a generically dependent continuant as part. (This list is not exhaustive.)

A continuant cannot have an occurrent as part: use 'participates in'. An occurrent cannot have a continuant as part: use 'has participant'. An immaterial entity cannot have a material entity as part: use 'location of'. An independent continuant cannot have a specifically dependent continuant as part: use 'bearer of'. A specifically dependent continuant cannot have an independent continuant as part: use 'inheres in'."@en)
AnnotationAssertion(obo:IAO_0000118 obo:BFO_0000051 "has_part"@en)
AnnotationAssertion(obo:RO_0001900 obo:BFO_0000051 obo:RO_0001901)
AnnotationAssertion(rdfs:label obo:BFO_0000051 "has part"@en)
TransitiveObjectProperty(obo:BFO_0000051)

# Object Property: obo:BFO_0000054 (realized in)

AnnotationAssertion(obo:IAO_0000111 obo:BFO_0000054 "realized in"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000054 "this disease is realized in this disease course"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000054 "this fragility is realized in this shattering"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000054 "this investigator role is realized in this investigation"@en)
AnnotationAssertion(obo:IAO_0000118 obo:BFO_0000054 "is realized by"@en)
AnnotationAssertion(obo:IAO_0000118 obo:BFO_0000054 "realized_in"@en)
AnnotationAssertion(obo:IAO_0000600 obo:BFO_0000054 "[copied from inverse property 'realizes'] to say that b realizes c at t is to assert that there is some material entity d & b is a process which has participant d at t & c is a disposition or role of which d is bearer_of at t& the type instantiated by b is correlated with the type instantiated by c. (axiom label in BFO2 Reference: [059-003])"@en)
AnnotationAssertion(rdfs:comment obo:BFO_0000054 "Paraphrase of elucidation: a relation between a realizable entity and a process, where there is some material entity that is bearer of the realizable entity and participates in the process, and the realizable entity comes to be realized in the course of the process")
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000054 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000054 "realized in"@en)
InverseObjectProperties(obo:BFO_0000054 obo:BFO_0000055)
ObjectPropertyDomain(obo:BFO_0000054 obo:BFO_0000017)
ObjectPropertyRange(obo:BFO_0000054 obo:BFO_0000015)

# Object Property: obo:BFO_0000055 (realizes)

AnnotationAssertion(obo:IAO_0000111 obo:BFO_0000055 "realizes"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000055 "this disease course realizes this disease"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000055 "this investigation realizes this investigator role"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000055 "this shattering realizes this fragility"@en)
AnnotationAssertion(obo:IAO_0000600 obo:BFO_0000055 "to say that b realizes c at t is to assert that there is some material entity d & b is a process which has participant d at t & c is a disposition or role of which d is bearer_of at t& the type instantiated by b is correlated with the type instantiated by c. (axiom label in BFO2 Reference: [059-003])"@en)
AnnotationAssertion(rdfs:comment obo:BFO_0000055 "Paraphrase of elucidation: a relation between a process and a realizable entity, where there is some material entity that is bearer of the realizable entity and participates in the process, and the realizable entity comes to be realized in the course of the process")
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000055 obo:iao.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000055 "realizes"@en)
ObjectPropertyDomain(obo:BFO_0000055 obo:BFO_0000015)
ObjectPropertyRange(obo:BFO_0000055 obo:BFO_0000017)

# Object Property: obo:BFO_0000066 (occurs in)

AnnotationAssertion(obo:IAO_0000111 obo:BFO_0000066 "occurs in"@en)
AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000066 "b occurs_in c =def b is a process and c is a material entity or immaterial entity& there exists a spatiotemporal region r and b occupies_spatiotemporal_region r.& forall(t) if b exists_at t then c exists_at t & there exist spatial regions s and s’ where & b spatially_projects_onto s at t& c is occupies_spatial_region s’ at t& s is a proper_continuant_part_of s’ at t"@en)
AnnotationAssertion(obo:IAO_0000118 obo:BFO_0000066 "occurs_in"@en)
AnnotationAssertion(obo:IAO_0000118 obo:BFO_0000066 "unfolds in"@en)
AnnotationAssertion(obo:IAO_0000118 obo:BFO_0000066 "unfolds_in"@en)
AnnotationAssertion(rdfs:comment obo:BFO_0000066 "Paraphrase of definition: a relation between a process and an independent continuant, in which the process takes place entirely within the independent continuant")
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000066 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000066 "occurs in"@en)
InverseObjectProperties(obo:BFO_0000066 obo:BFO_0000067)
ObjectPropertyDomain(obo:BFO_0000066 obo:BFO_0000003)
ObjectPropertyRange(obo:BFO_0000066 obo:BFO_0000004)

# Object Property: obo:BFO_0000067 (contains process)

AnnotationAssertion(obo:IAO_0000111 obo:BFO_0000067 "site of"@en)
AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000067 "[copied from inverse property 'occurs in'] b occurs_in c =def b is a process and c is a material entity or immaterial entity& there exists a spatiotemporal region r and b occupies_spatiotemporal_region r.& forall(t) if b exists_at t then c exists_at t & there exist spatial regions s and s’ where & b spatially_projects_onto s at t& c is occupies_spatial_region s’ at t& s is a proper_continuant_part_of s’ at t"@en)
AnnotationAssertion(rdfs:comment obo:BFO_0000067 "Paraphrase of definition: a relation between an independent continuant and a process, in which the process takes place entirely within the independent continuant")
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000067 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000067 "contains process"@en)

# Object Property: obo:RO_0000052 (characteristic of)

AnnotationAssertion(obo:IAO_0000111 obo:RO_0000052 "inheres in"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0000052 "this fragility is a characteristic of this vase"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0000052 "this red color is a characteristic of this apple"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000052 "a relation between a specifically dependent continuant (the characteristic) and any other entity (the bearer), in which the characteristic depends on the bearer for its existence."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000052 "inheres_in"@en)
AnnotationAssertion(obo:RO_0001900 obo:RO_0000052 obo:RO_0001901)
AnnotationAssertion(rdfs:comment obo:RO_0000052 "Note that this relation was previously called \"inheres in\", but was changed to be called \"characteristic of\" because BFO2 uses \"inheres in\" in a more restricted fashion. This relation differs from BFO2:inheres_in in two respects: (1) it does not impose a range constraint, and thus it allows qualities of processes, as well as of information entities, whereas BFO2 restricts inheres_in to only apply to independent continuants (2) it is declared functional, i.e. something can only be a characteristic of one thing.")
AnnotationAssertion(rdfs:label obo:RO_0000052 "characteristic of"@en)
InverseObjectProperties(obo:RO_0000052 obo:RO_0000053)
FunctionalObjectProperty(obo:RO_0000052)

# Object Property: obo:RO_0000053 (has characteristic)

AnnotationAssertion(obo:IAO_0000111 obo:RO_0000053 "bearer of"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0000053 "this apple is bearer of this red color"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0000053 "this vase is bearer of this fragility"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000053 "Inverse of characteristic_of"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0000053 "A bearer can have many dependents, and its dependents can exist for different periods of time, but none of its dependents can exist when the bearer does not exist."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000053 "bearer_of"@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000053 "is bearer of"@en)
AnnotationAssertion(obo:RO_0001900 obo:RO_0000053 obo:RO_0001901)
AnnotationAssertion(rdfs:label obo:RO_0000053 "has characteristic"@en)
InverseFunctionalObjectProperty(obo:RO_0000053)
ObjectPropertyRange(obo:RO_0000053 obo:BFO_0000020)

# Object Property: obo:RO_0000056 (participates in)

AnnotationAssertion(obo:IAO_0000111 obo:RO_0000056 "participates in"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0000056 "this blood clot participates in this blood coagulation"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0000056 "this input material (or this output material) participates in this process"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0000056 "this investigator participates in this investigation"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000056 "a relation between a continuant and a process, in which the continuant is somehow involved in the process"@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000056 "participates_in"@en)
AnnotationAssertion(rdfs:label obo:RO_0000056 "participates in"@en)
InverseObjectProperties(obo:RO_0000056 obo:RO_0000057)
ObjectPropertyDomain(obo:RO_0000056 obo:BFO_0000002)
ObjectPropertyRange(obo:RO_0000056 obo:BFO_0000003)

# Object Property: obo:RO_0000057 (has participant)

AnnotationAssertion(obo:IAO_0000111 obo:RO_0000057 "has participant"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0000057 "this blood coagulation has participant this blood clot"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0000057 "this investigation has participant this investigator"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0000057 "this process has participant this input material (or this output material)"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000057 "a relation between a process and a continuant, in which the continuant is somehow involved in the process"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0000057 "Has_participant is a primitive instance-level relation between a process, a continuant, and a time at which the continuant participates in some way in the process. The relation obtains, for example, when this particular process of oxygen exchange across this particular alveolar membrane has_participant this particular sample of hemoglobin at this particular time."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000057 "has_participant"@en)
AnnotationAssertion(terms:source obo:RO_0000057 "http://www.obofoundry.org/ro/#OBO_REL:has_participant")
AnnotationAssertion(rdfs:label obo:RO_0000057 "has participant"@en)
ObjectPropertyDomain(obo:RO_0000057 obo:BFO_0000003)
ObjectPropertyRange(obo:RO_0000057 obo:BFO_0000002)

# Object Property: obo:RO_0000058 (is concretized as)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0000058 "A journal article is an information artifact that inheres in some number of printed journals. For each copy of the printed journal there is some quality that carries the journal article, such as a pattern of ink. The journal article (a generically dependent continuant) is concretized as the quality (a specifically dependent continuant), and both depend on that copy of the printed journal (an independent continuant)."@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0000058 "An investigator reads a protocol and forms a plan to carry out an assay. The plan is a realizable entity (a specifically dependent continuant) that concretizes the protocol (a generically dependent continuant), and both depend on the investigator (an independent continuant). The plan is then realized by the assay (a process)."@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000058 "A relationship between a generically dependent continuant and a specifically dependent continuant, in which the generically dependent continuant depends on some independent continuant in virtue of the fact that the specifically dependent continuant also depends on that same independent continuant. A generically dependent continuant may be concretized as multiple specifically dependent continuants."@en)
AnnotationAssertion(rdfs:label obo:RO_0000058 "is concretized as"@en)
InverseObjectProperties(obo:RO_0000058 obo:RO_0000059)
ObjectPropertyDomain(obo:RO_0000058 obo:BFO_0000031)
ObjectPropertyRange(obo:RO_0000058 obo:BFO_0000020)

# Object Property: obo:RO_0000059 (concretizes)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0000059 "A journal article is an information artifact that inheres in some number of printed journals. For each copy of the printed journal there is some quality that carries the journal article, such as a pattern of ink. The quality (a specifically dependent continuant) concretizes the journal article (a generically dependent continuant), and both depend on that copy of the printed journal (an independent continuant)."@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0000059 "An investigator reads a protocol and forms a plan to carry out an assay. The plan is a realizable entity (a specifically dependent continuant) that concretizes the protocol (a generically dependent continuant), and both depend on the investigator (an independent continuant). The plan is then realized by the assay (a process)."@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000059 "A relationship between a specifically dependent continuant and a generically dependent continuant, in which the generically dependent continuant depends on some independent continuant in virtue of the fact that the specifically dependent continuant also depends on that same independent continuant. Multiple specifically dependent continuants can concretize the same generically dependent continuant."@en)
AnnotationAssertion(rdfs:label obo:RO_0000059 "concretizes"@en)
ObjectPropertyDomain(obo:RO_0000059 obo:BFO_0000020)
ObjectPropertyRange(obo:RO_0000059 obo:BFO_0000031)

# Object Property: obo:RO_0000079 (function of)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0000079 "this catalysis function is a function of this enzyme"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000079 "a relation between a function and an independent continuant (the bearer), in which the function specifically depends on the bearer for its existence"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0000079 "A function inheres in its bearer at all times for which the function exists, however the function need not be realized at all the times that the function exists."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000079 "function_of"@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000079 "is function of"@en)
AnnotationAssertion(rdfs:comment obo:RO_0000079 "This relation is modeled after the BFO relation of the same name which was in BFO2, but is used in a more restricted sense - specifically, we model this relation as functional (inherited from characteristic-of). Note that this relation is now removed from BFO2020.")
AnnotationAssertion(rdfs:label obo:RO_0000079 "function of"@en)
SubObjectPropertyOf(obo:RO_0000079 obo:RO_0000052)
InverseObjectProperties(obo:RO_0000079 obo:RO_0000085)
ObjectPropertyDomain(obo:RO_0000079 obo:BFO_0000034)

# Object Property: obo:RO_0000080 (quality of)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0000080 "this red color is a quality of this apple"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000080 "a relation between a quality and an independent continuant (the bearer), in which the quality specifically depends on the bearer for its existence"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0000080 "A quality inheres in its bearer at all times for which the quality exists."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000080 "is quality of"@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000080 "quality_of"@en)
AnnotationAssertion(rdfs:comment obo:RO_0000080 "This relation is modeled after the BFO relation of the same name which was in BFO2, but is used in a more restricted sense - specifically, we model this relation as functional (inherited from characteristic-of). Note that this relation is now removed from BFO2020.")
AnnotationAssertion(rdfs:label obo:RO_0000080 "quality of"@en)
SubObjectPropertyOf(obo:RO_0000080 obo:RO_0000052)
InverseObjectProperties(obo:RO_0000080 obo:RO_0000086)

# Object Property: obo:RO_0000081 (role of)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0000081 "this investigator role is a role of this person"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000081 "a relation between a role and an independent continuant (the bearer), in which the role specifically depends on the bearer for its existence"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0000081 "A role inheres in its bearer at all times for which the role exists, however the role need not be realized at all the times that the role exists."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000081 "is role of"@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000081 "role_of"@en)
AnnotationAssertion(rdfs:comment obo:RO_0000081 "This relation is modeled after the BFO relation of the same name which was in BFO2, but is used in a more restricted sense - specifically, we model this relation as functional (inherited from characteristic-of). Note that this relation is now removed from BFO2020.")
AnnotationAssertion(rdfs:label obo:RO_0000081 "role of"@en)
SubObjectPropertyOf(obo:RO_0000081 obo:RO_0000052)
InverseObjectProperties(obo:RO_0000081 obo:RO_0000087)

# Object Property: obo:RO_0000085 (has function)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0000085 "this enzyme has function this catalysis function (more colloquially: this enzyme has this catalysis function)"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000085 "a relation between an independent continuant (the bearer) and a function, in which the function specifically depends on the bearer for its existence"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0000085 "A bearer can have many functions, and its functions can exist for different periods of time, but none of its functions can exist when the bearer does not exist. A function need not be realized at all the times that the function exists."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000085 "has_function"@en)
AnnotationAssertion(rdfs:label obo:RO_0000085 "has function"@en)
SubObjectPropertyOf(obo:RO_0000085 obo:RO_0000053)
ObjectPropertyDomain(obo:RO_0000085 obo:BFO_0000004)
ObjectPropertyRange(obo:RO_0000085 obo:BFO_0000034)

# Object Property: obo:RO_0000086 (has quality)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0000086 "this apple has quality this red color"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000086 "a relation between an independent continuant (the bearer) and a quality, in which the quality specifically depends on the bearer for its existence"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0000086 "A bearer can have many qualities, and its qualities can exist for different periods of time, but none of its qualities can exist when the bearer does not exist."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000086 "has_quality"@en)
AnnotationAssertion(rdfs:label obo:RO_0000086 "has quality"@en)
SubObjectPropertyOf(obo:RO_0000086 obo:RO_0000053)
ObjectPropertyRange(obo:RO_0000086 obo:BFO_0000019)

# Object Property: obo:RO_0000087 (has role)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0000087 "this person has role this investigator role (more colloquially: this person has this role of investigator)"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000087 "a relation between an independent continuant (the bearer) and a role, in which the role specifically depends on the bearer for its existence"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0000087 "A bearer can have many roles, and its roles can exist for different periods of time, but none of its roles can exist when the bearer does not exist. A role need not be realized at all the times that the role exists."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0000087 "has_role"@en)
AnnotationAssertion(rdfs:label obo:RO_0000087 "has role"@en)
SubObjectPropertyOf(obo:RO_0000087 obo:RO_0000053)
ObjectPropertyDomain(obo:RO_0000087 obo:BFO_0000004)
ObjectPropertyRange(obo:RO_0000087 obo:BFO_0000023)

# Object Property: obo:RO_0000091 (has disposition)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0000091 "a relation between an independent continuant (the bearer) and a disposition, in which the disposition specifically depends on the bearer for its existence"@en)
AnnotationAssertion(rdfs:label obo:RO_0000091 "has disposition"@en)
SubObjectPropertyOf(obo:RO_0000091 obo:RO_0000053)
InverseObjectProperties(obo:RO_0000091 obo:RO_0000092)
ObjectPropertyDomain(obo:RO_0000091 obo:BFO_0000004)
ObjectPropertyRange(obo:RO_0000091 obo:BFO_0000016)

# Object Property: obo:RO_0000092 (disposition of)

AnnotationAssertion(rdfs:comment obo:RO_0000092 "This relation is modeled after the BFO relation of the same name which was in BFO2, but is used in a more restricted sense - specifically, we model this relation as functional (inherited from characteristic-of). Note that this relation is now removed from BFO2020.")
AnnotationAssertion(rdfs:label obo:RO_0000092 "disposition of"@en)
SubObjectPropertyOf(obo:RO_0000092 obo:RO_0000052)

# Object Property: obo:RO_0001000 (derives from)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0001000 "this cell derives from this parent cell (cell division)"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0001000 "this nucleus derives from this parent nucleus (nuclear division)"@en)
AnnotationAssertion(obo:IAO_0000114 obo:RO_0001000 obo:IAO_0000125)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0001000 "a relation between two distinct material entities, the new entity and the old entity, in which the new entity begins to exist when the old entity ceases to exist, and the new entity inherits the significant portion of the matter of the old entity"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0001000 "This is a very general relation. More specific relations are preferred when applicable, such as 'directly develops from'."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0001000 "derives_from"@en)
AnnotationAssertion(rdfs:label obo:RO_0001000 "derives from"@en)
InverseObjectProperties(obo:RO_0001000 obo:RO_0001001)

# Object Property: obo:RO_0001001 (derives into)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0001001 "this parent cell derives into this cell (cell division)"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0001001 "this parent nucleus derives into this nucleus (nuclear division)"@en)
AnnotationAssertion(obo:IAO_0000114 obo:RO_0001001 obo:IAO_0000125)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0001001 "a relation between two distinct material entities, the old entity and the new entity, in which the new entity begins to exist when the old entity ceases to exist, and the new entity inherits the significant portion of the matter of the old entity"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0001001 "This is a very general relation. More specific relations are preferred when applicable, such as 'directly develops into'. To avoid making statements about a future that may not come to pass, it is often better to use the backward-looking 'derives from' rather than the forward-looking 'derives into'."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0001001 "derives_into"@en)
AnnotationAssertion(rdfs:label obo:RO_0001001 "derives into"@en)

# Object Property: obo:RO_0001015 (location of)

AnnotationAssertion(obo:IAO_0000111 obo:RO_0001015 "is location of"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0001015 "my head is the location of my brain"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0001015 "this cage is the location of this rat"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0001015 "a relation between two independent continuants, the location and the target, in which the target is entirely within the location"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0001015 "Most location relations will only hold at certain times, but this is difficult to specify in OWL. See http://purl.obolibrary.org/obo/ro/docs/temporal-semantics/"@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0001015 "location_of"@en)
AnnotationAssertion(obo:RO_0001900 obo:RO_0001015 obo:RO_0001901)
AnnotationAssertion(rdfs:label obo:RO_0001015 "location of"@en)
InverseObjectProperties(obo:RO_0001015 obo:RO_0001025)
TransitiveObjectProperty(obo:RO_0001015)

# Object Property: obo:RO_0001025 (located in)

AnnotationAssertion(obo:IAO_0000111 obo:RO_0001025 "located in"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0001025 "my brain is located in my head"@en)
AnnotationAssertion(obo:IAO_0000112 obo:RO_0001025 "this rat is located in this cage"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0001025 "a relation between two independent continuants, the target and the location, in which the target is entirely within the location"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0001025 "Location as a relation between instances: The primitive instance-level relation c located_in r at t reflects the fact that each continuant is at any given time associated with exactly one spatial region, namely its exact location. Following we can use this relation to define a further instance-level location relation - not between a continuant and the region which it exactly occupies, but rather between one continuant and another. c is located in c1, in this sense, whenever the spatial region occupied by c is part_of the spatial region occupied by c1.    Note that this relation comprehends both the relation of exact location between one continuant and another which obtains when r and r1 are identical (for example, when a portion of fluid exactly fills a cavity), as well as those sorts of inexact location relations which obtain, for example, between brain and head or between ovum and uterus"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0001025 "Most location relations will only hold at certain times, but this is difficult to specify in OWL. See http://purl.obolibrary.org/obo/ro/docs/temporal-semantics/"@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0001025 "located_in"@en)
AnnotationAssertion(obo:RO_0001900 obo:RO_0001025 obo:RO_0001901)
AnnotationAssertion(terms:source obo:RO_0001025 "http://www.obofoundry.org/ro/#OBO_REL:located_in")
AnnotationAssertion(rdfs:label obo:RO_0001025 "located in"@en)
TransitiveObjectProperty(obo:RO_0001025)
ObjectPropertyDomain(Annotation(obo:IAO_0000116 "This is redundant with the more specific 'independent and not spatial region' constraint. We leave in the redundant axiom for use with reasoners that do not use negation.") obo:RO_0001025 obo:BFO_0000004)
ObjectPropertyDomain(obo:RO_0001025 ObjectIntersectionOf(obo:BFO_0000004 ObjectComplementOf(obo:BFO_0000006)))
ObjectPropertyRange(Annotation(obo:IAO_0000116 "This is redundant with the more specific 'independent and not spatial region' constraint. We leave in the redundant axiom for use with reasoners that do not use negation.") obo:RO_0001025 obo:BFO_0000004)
ObjectPropertyRange(obo:RO_0001025 ObjectIntersectionOf(obo:BFO_0000004 ObjectComplementOf(obo:BFO_0000006)))

# Object Property: obo:RO_0002000 (2D boundary of)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0002000 "the surface of my skin is a 2D boundary of my body"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0002000 "a relation between a 2D immaterial entity (the boundary) and a material entity, in which the boundary delimits the material entity"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0002000 "A 2D boundary may have holes and gaps, but it must be a single connected entity, not an aggregate of several disconnected parts."@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0002000 "Although the boundary is two-dimensional, it exists in three-dimensional space and thus has a 3D shape."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0002000 "2D_boundary_of"@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0002000 "boundary of"@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0002000 "is 2D boundary of"@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0002000 "is boundary of"@en)
AnnotationAssertion(obo:RO_0001900 obo:RO_0002000 obo:RO_0001901)
AnnotationAssertion(rdfs:label obo:RO_0002000 "2D boundary of"@en)
InverseObjectProperties(obo:RO_0002000 obo:RO_0002002)

# Object Property: obo:RO_0002002 (has 2D boundary)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0002002 "my body has 2D boundary the surface of my skin"@en)
AnnotationAssertion(obo:IAO_0000115 obo:RO_0002002 "a relation between a material entity and a 2D immaterial entity (the boundary), in which the boundary delimits the material entity"@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0002002 "A 2D boundary may have holes and gaps, but it must be a single connected entity, not an aggregate of several disconnected parts."@en)
AnnotationAssertion(obo:IAO_0000116 obo:RO_0002002 "Although the boundary is two-dimensional, it exists in three-dimensional space and thus has a 3D shape."@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0002002 "has boundary"@en)
AnnotationAssertion(obo:IAO_0000118 obo:RO_0002002 "has_2D_boundary"@en)
AnnotationAssertion(obo:RO_0001900 obo:RO_0002002 obo:RO_0001901)
AnnotationAssertion(rdfs:label obo:RO_0002002 "has 2D boundary"@en)
ObjectPropertyDomain(obo:RO_0002002 obo:BFO_0000040)
ObjectPropertyRange(obo:RO_0002002 obo:BFO_0000141)

# Object Property: obo:RO_0002350 (member of)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0002350 "An organism that is a member of a population of organisms")
AnnotationAssertion(obo:IAO_0000115 obo:RO_0002350 "is member of is a mereological relation between a item and a collection.")
AnnotationAssertion(obo:IAO_0000118 obo:RO_0002350 "is member of")
AnnotationAssertion(obo:IAO_0000118 obo:RO_0002350 "member part of")
AnnotationAssertion(obo:IAO_0000119 obo:RO_0002350 "SIO")
AnnotationAssertion(obo:RO_0001900 obo:RO_0002350 obo:RO_0001901)
AnnotationAssertion(rdfs:label obo:RO_0002350 "member of"@en)
SubObjectPropertyOf(obo:RO_0002350 obo:BFO_0000050)
InverseObjectProperties(obo:RO_0002350 obo:RO_0002351)

# Object Property: obo:RO_0002351 (has member)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0002351 "has member is a mereological relation between a collection and an item.")
AnnotationAssertion(obo:IAO_0000119 obo:RO_0002351 "SIO")
AnnotationAssertion(obo:RO_0001900 obo:RO_0002351 obo:RO_0001901)
AnnotationAssertion(rdfs:label obo:RO_0002351 "has member"@en)
SubObjectPropertyOf(obo:RO_0002351 obo:BFO_0000051)
IrreflexiveObjectProperty(obo:RO_0002351)

# Object Property: obo:RO_0004096 (DEPRECATED inheres in)

AnnotationAssertion(rdfs:comment obo:RO_0004096 "DEPRECATED This relation is similar to but different in important respects to the characteristic-of relation. See comments on that relation for more information.")
AnnotationAssertion(rdfs:label obo:RO_0004096 "DEPRECATED inheres in"@en)
AnnotationAssertion(owl:deprecated obo:RO_0004096 "true"^^xsd:boolean)

# Object Property: obo:RO_0004097 (DEPRECATED bearer of)

AnnotationAssertion(rdfs:label obo:RO_0004097 "DEPRECATED bearer of"@en)
AnnotationAssertion(owl:deprecated obo:RO_0004097 "true"^^xsd:boolean)



############################
#   Classes
############################

# Class: obo:BFO_0000002 (continuant)

AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000002 "An entity that exists in full at any time in which it exists at all, persists through time while maintaining its identity and has no temporal parts."@en)
AnnotationAssertion(rdfs:label obo:BFO_0000002 "continuant"@en)
DisjointClasses(obo:BFO_0000002 obo:BFO_0000003)
DisjointClasses(obo:BFO_0000002 ObjectSomeValuesFrom(obo:BFO_0000050 obo:BFO_0000003))

# Class: obo:BFO_0000003 (occurrent)

AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000003 "An entity that has temporal parts and that happens, unfolds or develops through time."@en)
AnnotationAssertion(rdfs:label obo:BFO_0000003 "occurrent"@en)
DisjointClasses(obo:BFO_0000003 ObjectSomeValuesFrom(obo:BFO_0000050 obo:BFO_0000002))

# Class: obo:BFO_0000004 (independent continuant)

AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000004 "b is an independent continuant = Def. b is a continuant which is such that there is no c and no t such that b s-depends_on c at t. (axiom label in BFO2 Reference: [017-002])"@en)
AnnotationAssertion(rdfs:comment obo:BFO_0000004 "A continuant that is a bearer of quality and realizable entity entities, in which other entities inhere and which itself cannot inhere in anything."@en)
AnnotationAssertion(rdfs:label obo:BFO_0000004 "independent continuant"@en)
SubClassOf(obo:BFO_0000004 obo:BFO_0000002)
DisjointClasses(obo:BFO_0000004 obo:BFO_0000020)
DisjointClasses(obo:BFO_0000004 obo:BFO_0000031)

# Class: obo:BFO_0000006 (spatial region)

AnnotationAssertion(rdfs:label obo:BFO_0000006 "spatial region"@en)
SubClassOf(obo:BFO_0000006 obo:BFO_0000141)

# Class: obo:BFO_0000015 (process)

AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000015 "p is a process = Def. p is an occurrent that has temporal proper parts and for some time t, p s-depends_on some material entity at t. (axiom label in BFO2 Reference: [083-003])"@en)
AnnotationAssertion(rdfs:comment obo:BFO_0000015 "An occurrent that has temporal proper parts and for some time t, p s-depends_on some material entity at t."@en)
AnnotationAssertion(rdfs:label obo:BFO_0000015 "process"@en)
SubClassOf(obo:BFO_0000015 obo:BFO_0000003)

# Class: obo:BFO_0000016 (disposition)

AnnotationAssertion(rdfs:label obo:BFO_0000016 "disposition"@en)
SubClassOf(obo:BFO_0000016 obo:BFO_0000017)
DisjointClasses(obo:BFO_0000016 obo:BFO_0000023)

# Class: obo:BFO_0000017 (realizable entity)

AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000017 "A specifically dependent continuant  that inheres in continuant  entities and are not exhibited in full at every time in which it inheres in an entity or group of entities. The exhibition or actualization of a realizable entity is a particular manifestation, functioning or process that occurs under certain circumstances."@en)
AnnotationAssertion(rdfs:label obo:BFO_0000017 "realizable entity"@en)
SubClassOf(obo:BFO_0000017 obo:BFO_0000020)
DisjointClasses(obo:BFO_0000017 obo:BFO_0000019)

# Class: obo:BFO_0000019 (quality)

AnnotationAssertion(rdfs:label obo:BFO_0000019 "quality"@en)
SubClassOf(obo:BFO_0000019 obo:BFO_0000020)

# Class: obo:BFO_0000020 (specifically dependent continuant)

AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000020 "b is a specifically dependent continuant = Def. b is a continuant & there is some independent continuant c which is not a spatial region and which is such that b s-depends_on c at every time t during the course of b’s existence. (axiom label in BFO2 Reference: [050-003])"@en)
AnnotationAssertion(rdfs:comment obo:BFO_0000020 "A continuant that inheres in or is borne by other entities. Every instance of A requires some specific instance of B which must always be the same."@en)
AnnotationAssertion(rdfs:label obo:BFO_0000020 "specifically dependent continuant"@en)
SubClassOf(obo:BFO_0000020 obo:BFO_0000002)
DisjointClasses(obo:BFO_0000020 obo:BFO_0000031)

# Class: obo:BFO_0000023 (role)

AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000023 "A realizable entity  the manifestation of which brings about some result or end that is not essential to a continuant  in virtue of the kind of thing that it is but that can be served or participated in by that kind of continuant  in some kinds of natural, social or institutional contexts."@en)
AnnotationAssertion(rdfs:label obo:BFO_0000023 "role"@en)
SubClassOf(obo:BFO_0000023 obo:BFO_0000017)

# Class: obo:BFO_0000031 (generically dependent continuant)

AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000031 "b is a generically dependent continuant = Def. b is a continuant that g-depends_on one or more other entities. (axiom label in BFO2 Reference: [074-001])"@en)
AnnotationAssertion(rdfs:comment obo:BFO_0000031 "A continuant that is dependent on one or other independent continuant bearers. For every instance of A requires some instance of (an independent continuant type) B but which instance of B serves can change from time to time."@en)
AnnotationAssertion(rdfs:label obo:BFO_0000031 "generically dependent continuant"@en)
SubClassOf(obo:BFO_0000031 obo:BFO_0000002)

# Class: obo:BFO_0000034 (function)

AnnotationAssertion(rdfs:label obo:BFO_0000034 "function"@en)
SubClassOf(obo:BFO_0000034 obo:BFO_0000016)

# Class: obo:BFO_0000040 (material entity)

AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000040 "An independent continuant that is spatially extended whose identity is independent of that of other entities and can be maintained through time."@en)
AnnotationAssertion(rdfs:label obo:BFO_0000040 "material entity"@en)
SubClassOf(obo:BFO_0000040 obo:BFO_0000004)
DisjointClasses(obo:BFO_0000040 obo:BFO_0000141)

# Class: obo:BFO_0000141 (immaterial entity)

AnnotationAssertion(rdfs:label obo:BFO_0000141 "immaterial entity"@en)
SubClassOf(obo:BFO_0000141 obo:BFO_0000004)


SubObjectPropertyOf(ObjectPropertyChain(obo:BFO_0000050 obo:BFO_0000066) obo:BFO_0000066)
SubObjectPropertyOf(ObjectPropertyChain(obo:BFO_0000066 obo:BFO_0000050) obo:BFO_0000066)
DLSafeRule(Body(ClassAtom(obo:BFO_0000016 Variable(<urn:swrl#d>)) ObjectPropertyAtom(obo:RO_0000053 Variable(<urn:swrl#e>) Variable(<urn:swrl#d>)))Head(ObjectPropertyAtom(obo:RO_0000091 Variable(<urn:swrl#e>) Variable(<urn:swrl#d>))))
DLSafeRule(Body(ClassAtom(obo:BFO_0000019 Variable(<urn:swrl#d>)) ObjectPropertyAtom(obo:RO_0000053 Variable(<urn:swrl#e>) Variable(<urn:swrl#d>)))Head(ObjectPropertyAtom(obo:RO_0000086 Variable(<urn:swrl#e>) Variable(<urn:swrl#d>))))
DLSafeRule(Body(ClassAtom(obo:BFO_0000023 Variable(<urn:swrl#d>)) ObjectPropertyAtom(obo:RO_0000053 Variable(<urn:swrl#e>) Variable(<urn:swrl#d>)))Head(ObjectPropertyAtom(obo:RO_0000087 Variable(<urn:swrl#e>) Variable(<urn:swrl#d>))))
DLSafeRule(Body(ClassAtom(obo:BFO_0000034 Variable(<urn:swrl#d>)) ObjectPropertyAtom(obo:RO_0000053 Variable(<urn:swrl#e>) Variable(<urn:swrl#d>)))Head(ObjectPropertyAtom(obo:RO_0000085 Variable(<urn:swrl#e>) Variable(<urn:swrl#d>))))
)